{"version":3,"sources":["pages/home/home.jsx"],"names":["home","props","openUrl","params","url","window","open","getLocalData","then","data","arrs","default","setState","catch","error","console","log","getUrlData","state","loading","axios","get","resp","status","Error","content","str","Buffer","from","toString","JSON","parse","e","finally","delete","options","children","label","this","className","placeholder","onChange","text","tree","filter","onClick","ref","highlightCurrent","nodeKey","indent","defaultExpandedKeys","accordion","onNodeClicked","filterNodeMethod","value","title","indexOf","Component"],"mappings":"iSAMqBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAaVC,QAAU,SAAAC,GACDA,EAAOC,KACZC,OAAOC,KAAKH,EAAOC,IAAK,WAhBT,EAkBnBG,aAAe,WACX,kCACKC,MAAK,SAAAC,GAAS,IACIC,EAASD,EAAlBE,QACN,EAAKC,SAAS,CACVH,KAAMC,OAGbG,OAAM,SAAAC,GACHC,QAAQC,IAAI,SAAUF,OA3Bf,EA+BnBG,WAAa,WACL,EAAKC,MAAMC,UACf,EAAKP,SAAS,CACVO,SAAS,IAGbC,IACKC,IAAI,2GAEJb,MAAK,SAAAc,GACF,GAAoB,MAAhBA,EAAKC,OAOF,MAAM,IAAIC,MAAM,WANnB,IAAIf,EAAOa,EAAKb,KAAKgB,QACjBC,EAAMC,EAAOC,KAAKnB,EAAM,UAAUoB,WAClCnB,EAAOoB,KAAKC,MAAML,GACtB,EAAKd,SAAS,CACVH,KAAMC,OAIjBG,OAAM,SAAAmB,GACHjB,QAAQC,IAAR,IAAiBgB,MAEpBC,SAAQ,WACL,EAAKrB,SAAS,CACVO,SAAS,SAvDN,EA4DnBe,OAAS,WACL,EAAKtB,SAAS,CACVH,KAAM,MA5DV,EAAKS,MAAQ,CACTT,KAAM,GACN0B,QAAS,CACLC,SAAU,WACVC,MAAO,SAEXlB,SAAS,GARE,E,gEAYfmB,KAAKrB,e,+BAsDC,IAAD,SAC8BqB,KAAKpB,MAAhCT,EADH,EACGA,KAAM0B,EADT,EACSA,QAAShB,EADlB,EACkBA,QAEvB,OACI,sBAAKoB,UAAU,OAAf,UACI,sBAAKA,UAAU,SAAf,UACI,cAAC,QAAD,CAAOC,YAAY,yDAAYC,SAAU,SAAAC,GAAI,OAAI,EAAKC,KAAKC,OAAOF,MAClE,cAAC,SAAD,CAAQG,QAASP,KAAKrB,WAAtB,0BACA,cAAC,SAAD,CAAQ4B,QAASP,KAAKJ,OAAtB,6BAEJ,cAAC,UAAD,CAASf,QAASA,EAAlB,SACI,cAAC,OAAD,CACI2B,IAAK,SAAAd,GAAC,OAAK,EAAKW,KAAOX,GACvBvB,KAAMA,EACNsC,kBAAkB,EAClBZ,QAASA,EACTa,QAAQ,KACRC,OAAQ,GACRC,oBAAqB,CAAC,KAEtBC,WAAW,EAUXC,cAAed,KAAKpC,QACpBmD,iBAAkB,SAACC,EAAO7C,GACtB,OAAK6C,IACiC,IAA/B7C,EAAK8C,MAAMC,QAAQF,e,GApGpBG,c","file":"static/js/4.74cc768f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './home.scss';\r\nimport { Tree, Input, Button, Loading } from 'element-react';\r\nimport 'element-theme-default';\r\nimport axios from 'axios';\r\n\r\nexport default class home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            options: {\r\n                children: 'children',\r\n                label: 'title',\r\n            },\r\n            loading: false,\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.getUrlData();\r\n    }\r\n    openUrl = params => {\r\n        if (!params.url) return;\r\n        window.open(params.url, '_blank');\r\n    };\r\n    getLocalData = () => {\r\n        import('@/assets/chrome-bookmark.json')\r\n            .then(data => {\r\n                let { default: arrs } = data;\r\n                this.setState({\r\n                    data: arrs,\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log('error:', error);\r\n            });\r\n    };\r\n\r\n    getUrlData = () => {\r\n        if (this.state.loading) return;\r\n        this.setState({\r\n            loading: true,\r\n        });\r\n\r\n        axios\r\n            .get('https://api.github.com/repos/liqiang-xxfy/chrome-bookmark/contents/docs/chrome-bookmark.json?ref=master')\r\n            // .get('@/../public/chrome-bookmark.json')\r\n            .then(resp => {\r\n                if (resp.status === 200) {\r\n                    let data = resp.data.content;\r\n                    let str = Buffer.from(data, 'base64').toString();\r\n                    let arrs = JSON.parse(str);\r\n                    this.setState({\r\n                        data: arrs,\r\n                    });\r\n                } else throw new Error('no data');\r\n            })\r\n            .catch(e => {\r\n                console.log(`e`, e);\r\n            })\r\n            .finally(() => {\r\n                this.setState({\r\n                    loading: false,\r\n                });\r\n            });\r\n    };\r\n\r\n    delete = () => {\r\n        this.setState({\r\n            data: [],\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { data, options, loading } = this.state;\r\n        // console.log(`json`, json);\r\n        return (\r\n            <div className=\"home\">\r\n                <div className=\"search\">\r\n                    <Input placeholder=\"输入关键字进行过滤\" onChange={text => this.tree.filter(text)} />\r\n                    <Button onClick={this.getUrlData}>更新</Button>\r\n                    <Button onClick={this.delete}>删除</Button>\r\n                </div>\r\n                <Loading loading={loading}>\r\n                    <Tree\r\n                        ref={e => (this.tree = e)}\r\n                        data={data}\r\n                        highlightCurrent={true}\r\n                        options={options}\r\n                        nodeKey=\"id\"\r\n                        indent={25}\r\n                        defaultExpandedKeys={['1']}\r\n                        // defaultExpandAll={true}\r\n                        accordion={true}\r\n                        // renderContent={(nodeModel, data, store) => {\r\n                        //     console.log(`nodeModel`, nodeModel);\r\n                        //     return (\r\n                        //         <span>\r\n                        //             <img src={data.url} />\r\n                        //             <span className=\"el-tree-node__label\">{data.title}</span>\r\n                        //         </span>\r\n                        //     );\r\n                        // }}\r\n                        onNodeClicked={this.openUrl}\r\n                        filterNodeMethod={(value, data) => {\r\n                            if (!value) return true;\r\n                            return data.title.indexOf(value) !== -1;\r\n                        }}\r\n                    />\r\n                </Loading>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}